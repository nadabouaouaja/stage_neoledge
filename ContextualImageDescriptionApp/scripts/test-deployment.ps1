# Script PowerShell pour tester le d√©ploiement Azure
# V√©rifie que toutes les applications sont accessibles et fonctionnelles

param(
    [string]$ResourceGroupName = "ContextualImageDescriptionApp-RG",
    [string]$BackendAppName = "contextualimagedescriptionapp-backend",
    [string]$FrontendAppName = "contextualimagedescriptionapp-frontend",
    [string]$AiAppName = "contextualimagedescriptionapp-ai"
)

Write-Host "üß™ Test du d√©ploiement Azure" -ForegroundColor Green
Write-Host "üì¶ Groupe de ressources: $ResourceGroupName" -ForegroundColor Cyan

# URLs des applications
$BackendUrl = "https://$BackendAppName.azurewebsites.net"
$FrontendUrl = "https://$FrontendAppName.azurewebsites.net"
$AiUrl = "https://$AiAppName.azurewebsites.net"

# 1. V√©rifier le statut des App Services
Write-Host "üìä V√©rification du statut des App Services..." -ForegroundColor Yellow

$BackendStatus = az webapp show --resource-group $ResourceGroupName --name $BackendAppName --query "state" --output tsv
$FrontendStatus = az webapp show --resource-group $ResourceGroupName --name $FrontendAppName --query "state" --output tsv
$AiStatus = az webapp show --resource-group $ResourceGroupName --name $AiAppName --query "state" --output tsv

Write-Host "Backend: $BackendStatus" -ForegroundColor $(if ($BackendStatus -eq "Running") { "Green" } else { "Red" })
Write-Host "Frontend: $FrontendStatus" -ForegroundColor $(if ($FrontendStatus -eq "Running") { "Green" } else { "Red" })
Write-Host "AI Service: $AiStatus" -ForegroundColor $(if ($AiStatus -eq "Running") { "Green" } else { "Red" })

# 2. Tester l'accessibilit√© des applications
Write-Host ""
Write-Host "üåê Test d'accessibilit√© des applications..." -ForegroundColor Yellow

# Test Backend
Write-Host "üîß Test du Backend..." -ForegroundColor Yellow
try {
    $BackendResponse = Invoke-WebRequest -Uri "$BackendUrl/health" -UseBasicParsing -TimeoutSec 30
    if ($BackendResponse.StatusCode -eq 200) {
        Write-Host "‚úÖ Backend accessible - Status: $($BackendResponse.StatusCode)" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Backend accessible mais status inattendu: $($BackendResponse.StatusCode)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Backend non accessible: $($_.Exception.Message)" -ForegroundColor Red
}

# Test Frontend
Write-Host "üé® Test du Frontend..." -ForegroundColor Yellow
try {
    $FrontendResponse = Invoke-WebRequest -Uri $FrontendUrl -UseBasicParsing -TimeoutSec 30
    if ($FrontendResponse.StatusCode -eq 200) {
        Write-Host "‚úÖ Frontend accessible - Status: $($FrontendResponse.StatusCode)" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Frontend accessible mais status inattendu: $($FrontendResponse.StatusCode)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Frontend non accessible: $($_.Exception.Message)" -ForegroundColor Red
}

# Test AI Service
Write-Host "ü§ñ Test du AI Service..." -ForegroundColor Yellow
try {
    $AiResponse = Invoke-WebRequest -Uri "$AiUrl/health" -UseBasicParsing -TimeoutSec 30
    if ($AiResponse.StatusCode -eq 200) {
        Write-Host "‚úÖ AI Service accessible - Status: $($AiResponse.StatusCode)" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  AI Service accessible mais status inattendu: $($AiResponse.StatusCode)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå AI Service non accessible: $($_.Exception.Message)" -ForegroundColor Red
}

# 3. V√©rifier la base de donn√©es
Write-Host ""
Write-Host "üóÑÔ∏è  V√©rification de la base de donn√©es..." -ForegroundColor Yellow
try {
    $SqlServerName = "contextualimagedescriptionapp-sql"
    $DbStatus = az sql db show --resource-group $ResourceGroupName --server $SqlServerName --name IntelliDocDb --query "status" --output tsv
    Write-Host "‚úÖ Base de donn√©es: $DbStatus" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification de la base de donn√©es" -ForegroundColor Red
}

# 4. V√©rifier le registre de conteneurs
Write-Host ""
Write-Host "üê≥ V√©rification du registre de conteneurs..." -ForegroundColor Yellow
try {
    $AcrName = "contextualimagedescriptionappacr"
    $AcrStatus = az acr show --name $AcrName --query "provisioningState" --output tsv
    Write-Host "‚úÖ Registre de conteneurs: $AcrStatus" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification du registre de conteneurs" -ForegroundColor Red
}

# 5. Afficher les URLs finales
Write-Host ""
Write-Host "üåê URLs de vos applications:" -ForegroundColor Green
Write-Host "Backend API: $BackendUrl" -ForegroundColor Cyan
Write-Host "Frontend: $FrontendUrl" -ForegroundColor Cyan
Write-Host "AI Service: $AiUrl" -ForegroundColor Cyan

# 6. Test de fonctionnalit√© (optionnel)
Write-Host ""
Write-Host "üîç Test de fonctionnalit√©..." -ForegroundColor Yellow

# Test d'une requ√™te API simple
try {
    $ApiTestResponse = Invoke-WebRequest -Uri "$BackendUrl/api/health" -UseBasicParsing -TimeoutSec 30
    Write-Host "‚úÖ API Backend fonctionnelle" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  API Backend non test√©e (peut √™tre normal au premier d√©marrage)" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéâ Test de d√©ploiement termin√©!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã R√©sum√©:" -ForegroundColor Yellow
Write-Host "- Backend: $BackendUrl" -ForegroundColor White
Write-Host "- Frontend: $FrontendUrl" -ForegroundColor White
Write-Host "- AI Service: $AiUrl" -ForegroundColor White
Write-Host ""
Write-Host "üí° Si certaines applications ne sont pas accessibles, attendez quelques minutes et relancez ce script" -ForegroundColor Cyan
Write-Host "üí° Les applications peuvent prendre 5-10 minutes pour √™tre compl√®tement accessibles apr√®s le d√©ploiement" -ForegroundColor Cyan 